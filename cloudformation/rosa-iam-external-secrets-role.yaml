AWSTemplateFormatVersion: "2010-09-09"


Parameters:
  OidcProvider:
    Type: String
  AppNamespace:
    Type: String
    Default: "amazon-cloudwatch"
  AppServiceAccountName:
    Type: String
    Default: "iam-external-secrets-sa"
  ClusterName:
    Type: String

Resources:
  IamRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub
        - ${RosaClusterName}
        - RosaClusterName: !Join
          - ''
          - - !Ref ClusterName
            - '-RosaClusterSecrets'
      AssumeRolePolicyDocument: !Sub
        - |
          {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Federated": "${IamOidcProviderArn}"
                    },
                    "Action": "sts:AssumeRoleWithWebIdentity",
                    "Condition": {
                        "StringEquals": {
                            "${OidcProvider}:sub": "system:serviceaccount:${AppNamespace}:${AppServiceAccountName}"
                        }
                    }
                }
            ]
          }
        - IamOidcProviderArn: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref AWS::AccountId
            - ':oidc-provider/'
            - !Ref OidcProvider
          OidcProvider: !Ref OidcProvider
          AppNamespace: !Ref AppNamespace
          AppServiceAccountName: !Ref AppServiceAccountName

      Path: "/"

  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ExternalSecretCloudwatchCredentials"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              -  "secretsmanager:*"
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:rosa-cloudwatch-metrics-credentials-*"
      Roles:
        - Ref: "IamRole"

             

          
Outputs:
    RosaIAMRoleArn:
        Value: !GetAtt IamRole.Arn
